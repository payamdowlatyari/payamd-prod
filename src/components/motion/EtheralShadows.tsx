/* eslint-disable react/no-unused-prop-types */

"use client";

import {
  animate,
  useMotionValue,
  AnimationPlaybackControls,
} from "framer-motion";
import { useRef, useId, useEffect, CSSProperties } from "react";

/**
 * Interface representing a responsive image.
 */
interface ResponsiveImage {
  src: string;
  alt?: string;
  srcSet?: string;
}

/**
 * Interface representing the animation configuration.
 */
interface AnimationConfig {
  preview?: boolean;
  scale: number;
  speed: number;
}

/**
 * Interface representing the noise configuration.
 */
interface NoiseConfig {
  opacity: number;
  scale: number;
}

/**
 * Interface representing the props for the ShadowOverlay component.
 */
interface ShadowOverlayProps {
  type?: "preset" | "custom";
  presetIndex?: number;
  customImage?: ResponsiveImage;
  sizing?: "fill" | "stretch";
  color?: string;
  animation?: AnimationConfig;
  noise?: NoiseConfig;
  style?: CSSProperties;
  className?: string;
}

/**
 * Maps a number from one range to another.
 *
 * @param {number} value - The number to map.
 * @param {number} fromLow - The lower bound of the original range.
 * @param {number} fromHigh - The upper bound of the original range.
 * @param {number} toLow - The lower bound of the target range.
 * @param {number} toHigh - The upper bound of the target range.
 * @returns {number} The mapped number.
 */
function mapRange(
  value: number,
  fromLow: number,
  fromHigh: number,
  toLow: number,
  toHigh: number
): number {
  if (fromLow === fromHigh) {
    return toLow;
  }
  const percentage = (value - fromLow) / (fromHigh - fromLow);
  return toLow + percentage * (toHigh - toLow);
}

/**
 * Generates a unique id string for each instance of this component.
 *
 * This hook is used to generate a unique id for each instance of the
 * ShadowOverlay component. The id is used to identify the component in
 * the DOM. The id is generated by taking the id generated by React's
 * useId() hook and removing the colon (:) character from it.
 *
 * @returns {string} A unique id string.
 */
const useInstanceId = (): string => {
  const id = useId();
  const cleanId = id.replace(/:/g, "");
  return `shadowoverlay-${cleanId}`;
};

/**
 * Creates an overlay with a subtle, animated, gradient-like effect.
 *
 * The component takes several props:
 * - `sizing`: Whether the overlay should fill its container or stretch to fit.
 *   Defaults to `"fill"`.
 * - `color`: The color of the overlay. Defaults to `"rgba(128, 128, 128, 1)"`.
 * - `animation`: An object containing options for the animation. If `animation`
 *   is truthy, the overlay will animate. The object should contain the following
 *   properties:
 *   - `scale`: A number between 0 and 100 that determines the scale of the
 *     animation. Defaults to 0.
 *   - `speed`: A number between 0 and 100 that determines the speed of the
 *     animation. Defaults to 0.
 * - `noise`: An object containing options for the noise overlay. If `noise` is
 *   truthy, the overlay will have a noisy texture. The object should contain the
 *   following properties:
 *   - `opacity`: A number between 0 and 1 that determines the opacity of the
 *     noise overlay. Defaults to 0.
 *   - `scale`: A number that determines the scale of the noise overlay.
 *     Defaults to 1.
 * - `style`: A CSS style object that will be applied to the overlay.
 * - `className`: A string of CSS classes that will be applied to the overlay.
 *
 * The component returns a `div` element with the specified styles and classes.
 * The element contains two child elements: a `div` with the animated gradient
 * effect, and a `div` with the noise overlay.
 *
 * @param {ShadowOverlayProps} props - The props object.
 */
export default function EtheralShadows({
  sizing = "fill",
  color = "rgba(128, 128, 128, 1)",
  animation,
  noise,
  style,
  className,
}: ShadowOverlayProps) {
  const id = useInstanceId();
  const animationEnabled = animation && animation.scale > 0;
  const feColorMatrixRef = useRef<SVGFEColorMatrixElement>(null);
  const hueRotateMotionValue = useMotionValue(180);
  const hueRotateAnimation = useRef<AnimationPlaybackControls | null>(null);

  const displacementScale = animation
    ? mapRange(animation.scale, 1, 100, 20, 100)
    : 0;
  const animationDuration = animation
    ? mapRange(animation.speed, 1, 100, 1000, 50)
    : 1;

  useEffect(() => {
    if (feColorMatrixRef.current && animationEnabled) {
      if (hueRotateAnimation.current) {
        hueRotateAnimation.current.stop();
      }
      hueRotateMotionValue.set(0);
      hueRotateAnimation.current = animate(hueRotateMotionValue, 360, {
        duration: animationDuration / 25,
        repeat: Infinity,
        repeatType: "loop",
        repeatDelay: 0,
        ease: "linear",
        delay: 0,
        onUpdate: (value: number) => {
          if (feColorMatrixRef.current) {
            feColorMatrixRef.current.setAttribute("values", String(value));
          }
        },
      });

      return () => {
        if (hueRotateAnimation.current) {
          hueRotateAnimation.current.stop();
        }
      };
    }
  }, [animationEnabled, animationDuration, hueRotateMotionValue]);

  return (
    <div
      className={className}
      style={{
        overflow: "hidden",
        position: "relative",
        width: "100%",
        height: "100%",
        ...style,
      }}
    >
      <div
        style={{
          position: "absolute",
          inset: -displacementScale,
          filter: animationEnabled ? `url(#${id}) blur(4px)` : "none",
        }}
      >
        {animationEnabled && (
          <svg style={{ position: "absolute" }}>
            <defs>
              <filter id={id}>
                <feTurbulence
                  result="undulation"
                  numOctaves="2"
                  baseFrequency={`${mapRange(animation.scale, 0, 100, 0.001, 0.0005)},${mapRange(animation.scale, 0, 100, 0.004, 0.002)}`}
                  seed="0"
                  type="turbulence"
                />
                <feColorMatrix
                  ref={feColorMatrixRef}
                  in="undulation"
                  type="hueRotate"
                  values="180"
                />
                <feColorMatrix
                  in="dist"
                  result="circulation"
                  type="matrix"
                  values="4 0 0 0 1  4 0 0 0 1  4 0 0 0 1  1 0 0 0 0"
                />
                <feDisplacementMap
                  in="SourceGraphic"
                  in2="circulation"
                  scale={displacementScale}
                  result="dist"
                />
                <feDisplacementMap
                  in="dist"
                  in2="undulation"
                  scale={displacementScale}
                  result="output"
                />
              </filter>
            </defs>
          </svg>
        )}
        <div
          style={{
            backgroundColor: color,
            maskImage: `url('https://framerusercontent.com/images/ceBGguIpUU8luwByxuQz79t7To.png')`,
            maskSize: sizing === "stretch" ? "100% 100%" : "cover",
            maskRepeat: "no-repeat",
            maskPosition: "center",
            width: "100%",
            height: "100%",
          }}
        />
      </div>

      <div
        style={{
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          textAlign: "center",
          zIndex: 10,
        }}
      >
        <h1 className="md:text-7xl text-6xl lg:text-8xl font-bold text-center text-foreground relative z-20">
          Etheral Shadows
        </h1>
      </div>

      {noise && noise.opacity > 0 && (
        <div
          style={{
            position: "absolute",
            inset: 0,
            backgroundImage: `url("https://framerusercontent.com/images/g0QcWrxr87K0ufOxIUFBakwYA8.png")`,
            backgroundSize: noise.scale * 200,
            backgroundRepeat: "repeat",
            opacity: noise.opacity / 2,
          }}
        />
      )}
    </div>
  );
}
